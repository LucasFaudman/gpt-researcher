"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8995],{5680:(e,r,t)=>{t.d(r,{xA:()=>l,yg:()=>y});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},l=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(t),h=a,y=u["".concat(s,".").concat(h)]||u[h]||m[h]||o;return t?n.createElement(y,p(p({ref:r},l),{},{components:t})):n.createElement(y,p({ref:r},l))}));function y(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=h;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[u]="string"==typeof e?e:a,p[1]=i;for(var c=2;c<o;c++)p[c]=t[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9593:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=t(8168),a=(t(6540),t(5680));const o={},p="Simple Run",i={unversionedId:"examples/examples",id:"examples/examples",isDocsHomePage:!1,title:"Simple Run",description:"Run PIP Package",source:"@site/docs/examples/examples.md",sourceDirName:"examples",slug:"/examples/examples",permalink:"/docs/examples/examples",editUrl:"https://github.com/assafelovic/gpt-researcher/tree/master/docs/docs/examples/examples.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Detailed Report",permalink:"/docs/examples/detailed_report"},next:{title:"Hybrid Research",permalink:"/docs/examples/hybrid_research"}},s=[{value:"Run PIP Package",id:"run-pip-package",children:[],level:3}],c={toc:s},l="wrapper";function u(e){let{components:r,...t}=e;return(0,a.yg)(l,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"simple-run"},"Simple Run"),(0,a.yg)("h3",{id:"run-pip-package"},"Run PIP Package"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from gpt_researcher import GPTResearcher\nimport asyncio\n\n### Using Quick Run\nasync def main():\n    """\n    This is a sample script that shows how to run a research report.\n    """\n    # Query\n    query = "What happened in the latest burning man floods?"\n\n    # Report Type\n    report_type = "research_report"\n\n    # Initialize the researcher\n    researcher = GPTResearcher(query=query, report_type=report_type, config_path=None)\n    # Conduct research on the given query\n    await researcher.conduct_research()\n    # Write the report\n    report = await researcher.write_report()\n    \n    return report\n\n\nif __name__ == "__main__":\n    asyncio.run(main())\n\n# Custom Report Formatting\n\n### Using Custom Prompts\n```python\nfrom gpt_researcher import GPTResearcher\nimport asyncio\n\n\nasync def main():\n    """\n    This example shows how to use custom prompts to control report formatting.\n    """\n    # Query\n    query = "What are the latest advancements in renewable energy?"\n\n    # Report Type\n    report_type = "research_report"\n\n    # Initialize the researcher\n    researcher = GPTResearcher(query=query, report_type=report_type)\n    \n    # Conduct research on the given query\n    await researcher.conduct_research()\n    \n    # Generate a standard report\n    standard_report = await researcher.write_report()\n    print("Standard Report Generated")\n    \n    # Generate a short, concise report using custom_prompt\n    custom_prompt = "Provide a concise summary in 2 paragraphs without citations."\n    short_report = await researcher.write_report(custom_prompt=custom_prompt)\n    print("Short Report Generated")\n    \n    # Generate a bullet-point format report\n    bullet_prompt = "List the top 5 advancements as bullet points with brief explanations."\n    bullet_report = await researcher.write_report(custom_prompt=bullet_prompt)\n    print("Bullet-Point Report Generated")\n    \n    return standard_report, short_report, bullet_report\n\n\nif __name__ == "__main__":\n    asyncio.run(main())\n\nFor more comprehensive examples of using custom prompts, see the `custom_prompt.py` file included in the examples directory.\n')))}u.isMDXComponent=!0}}]);