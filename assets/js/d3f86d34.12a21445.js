"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6553],{117:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var s=n(4031),a=n(4848),i=n(8453);const r={slug:"building-openai-assistant",title:"How to build an OpenAI Assistant with Internet access",authors:["assafe"],tags:["tavily","search-api","openai","assistant-api"]},o=void 0,l={authorsImageUrls:[void 0]},u=[];function c(e){const t={a:"a",code:"code",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["OpenAI has done it again with a ",(0,a.jsx)(t.a,{href:"https://openai.com/blog/new-models-and-developer-products-announced-at-devday",children:"groundbreaking DevDay"})," showcasing some of the latest improvements to the OpenAI suite of tools, products and services. One major release was the new ",(0,a.jsx)(t.a,{href:"https://platform.openai.com/docs/assistants/overview",children:"Assistants API"})," that makes it easier for developers to build their own assistive AI apps that have goals and can call models and tools."]}),"\n",(0,a.jsx)(t.p,{children:"The new Assistants API currently supports three types of tools: Code Interpreter, Retrieval, and Function calling. Although you might expect the Retrieval tool to support online information retrieval (such as search APIs or as ChatGPT plugins), it only supports raw data for now such as text or CSV files."}),"\n",(0,a.jsx)(t.p,{children:"This blog will demonstrate how to leverage the latest Assistants API with online information using the function calling tool."}),"\n",(0,a.jsxs)(t.p,{children:["To skip the tutorial below, feel free to check out the full ",(0,a.jsx)(t.a,{href:"https://gist.github.com/assafelovic/579822cd42d52d80db1e1c1ff82ffffd",children:"Github Gist here"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"At a high level, a typical integration of the Assistants API has the following steps:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Create an ",(0,a.jsx)(t.a,{href:"https://platform.openai.com/docs/api-reference/assistants/createAssistant",children:"Assistant"})," in the API by defining its custom instructions and picking a model. If helpful, enable tools like Code Interpreter, Retrieval, and Function calling."]}),"\n",(0,a.jsxs)(t.li,{children:["Create a ",(0,a.jsx)(t.a,{href:"https://platform.openai.com/docs/api-reference/threads",children:"Thread"})," when a user starts a conversation."]}),"\n",(0,a.jsxs)(t.li,{children:["Add ",(0,a.jsx)(t.a,{href:"https://platform.openai.com/docs/api-reference/messages",children:"Messages"})," to the Thread as the user ask questions."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"https://platform.openai.com/docs/api-reference/runs",children:"Run"})," the Assistant on the Thread to trigger responses. This automatically calls the relevant tools."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"As you can see below, an Assistant object includes Threads for storing and handling conversation sessions between the assistant and users, and Run for invocation of an Assistant on a Thread."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"OpenAI Assistant Object",src:n(8314).A+"",width:"1360",height:"453"})}),"\n",(0,a.jsxs)(t.p,{children:["Let\u2019s go ahead and implement these steps one by one! For the example, we will build a finance GPT that can provide insights about financial questions. We will use the ",(0,a.jsx)(t.a,{href:"https://github.com/openai/openai-python/tree/main#installation",children:"OpenAI Python SDK v1.2"})," and ",(0,a.jsx)(t.a,{href:"https://tavily.com",children:"Tavily Search API"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"First things first, let\u2019s define the assistant\u2019s instructions:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'assistant_prompt_instruction = """You are a finance expert. \nYour goal is to provide answers based on information from the internet. \nYou must use the provided Tavily search API function to find relevant online information. \nYou should never use your own knowledge to answer questions.\nPlease include relevant url sources in the end of your answers.\n"""\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Next, let\u2019s finalize step 1 and create an assistant using the latest ",(0,a.jsx)(t.a,{href:"https://github.com/openai/openai-python/tree/main#installation",children:"GPT-4 Turbo model"})," (128K context), and the call function using the ",(0,a.jsx)(t.a,{href:"https://tavily.com/",children:"Tavily web search API"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Create an assistant\nassistant = client.beta.assistants.create(\n    instructions=assistant_prompt_instruction,\n    model="gpt-4-1106-preview",\n    tools=[{\n        "type": "function",\n        "function": {\n            "name": "tavily_search",\n            "description": "Get information on recent events from the web.",\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "query": {"type": "string", "description": "The search query to use. For example: \'Latest news on Nvidia stock performance\'"},\n                },\n                "required": ["query"]\n            }\n        }\n    }]\n)\n'})}),"\n",(0,a.jsx)(t.p,{children:"Step 2+3 are quite straight forward, we\u2019ll initiate a new thread and update it with a user message:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'thread = client.beta.threads.create()\nuser_input = input("You: ")\nmessage = client.beta.threads.messages.create(\n    thread_id=thread.id,\n    role="user",\n    content=user_input,\n)\n'})}),"\n",(0,a.jsx)(t.p,{children:"Finally, we\u2019ll run the assistant on the thread to trigger the function call and get the response:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"run = client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant_id,\n)\n"})}),"\n",(0,a.jsx)(t.p,{children:"So far so good! But this is where it gets a bit messy. Unlike with the regular GPT APIs, the Assistants API doesn\u2019t return a synchronous response, but returns a status. This allows for asynchronous operations across assistants, but requires more overhead for fetching statuses and dealing with each manually."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Status Diagram",src:n(9140).A+"",width:"1360",height:"453"})}),"\n",(0,a.jsx)(t.p,{children:"To manage this status lifecycle, let\u2019s build a function that can be reused and handles waiting for various statuses (such as \u2018requires_action\u2019):"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# Function to wait for a run to complete\ndef wait_for_run_completion(thread_id, run_id):\n    while True:\n        time.sleep(1)\n        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)\n        print(f\"Current run status: {run.status}\")\n        if run.status in ['completed', 'failed', 'requires_action']:\n            return run\n"})}),"\n",(0,a.jsx)(t.p,{children:"This function will sleep as long as the run has not been finalized such as in cases where it\u2019s completed or requires an action from a function call."}),"\n",(0,a.jsx)(t.p,{children:"We\u2019re almost there! Lastly, let\u2019s take care of when the assistant wants to call the web search API:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Function to handle tool output submission\ndef submit_tool_outputs(thread_id, run_id, tools_to_call):\n    tool_output_array = []\n    for tool in tools_to_call:\n        output = None\n        tool_call_id = tool.id\n        function_name = tool.function.name\n        function_args = tool.function.arguments\n\n        if function_name == "tavily_search":\n            output = tavily_search(query=json.loads(function_args)["query"])\n\n        if output:\n            tool_output_array.append({"tool_call_id": tool_call_id, "output": output})\n\n    return client.beta.threads.runs.submit_tool_outputs(\n        thread_id=thread_id,\n        run_id=run_id,\n        tool_outputs=tool_output_array\n    )\n'})}),"\n",(0,a.jsx)(t.p,{children:"As seen above, if the assistant has reasoned that a function call should trigger, we extract the given required function params and pass back to the runnable thread. We catch this status and call our functions as seen below:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"if run.status == 'requires_action':\n    run = submit_tool_outputs(thread.id, run.id, run.required_action.submit_tool_outputs.tool_calls)\n    run = wait_for_run_completion(thread.id, run.id)\n"})}),"\n",(0,a.jsx)(t.p,{children:"That\u2019s it! We now have a working OpenAI Assistant that can be used to answer financial questions using real time online information. Below is the full runnable code:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import os\nimport json\nimport time\nfrom openai import OpenAI\nfrom tavily import TavilyClient\n\n# Initialize clients with API keys\nclient = OpenAI(api_key=os.environ["OPENAI_API_KEY"])\ntavily_client = TavilyClient(api_key=os.environ["TAVILY_API_KEY"])\n\nassistant_prompt_instruction = """You are a finance expert. \nYour goal is to provide answers based on information from the internet. \nYou must use the provided Tavily search API function to find relevant online information. \nYou should never use your own knowledge to answer questions.\nPlease include relevant url sources in the end of your answers.\n"""\n\n# Function to perform a Tavily search\ndef tavily_search(query):\n    search_result = tavily_client.get_search_context(query, search_depth="advanced", max_tokens=8000)\n    return search_result\n\n# Function to wait for a run to complete\ndef wait_for_run_completion(thread_id, run_id):\n    while True:\n        time.sleep(1)\n        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)\n        print(f"Current run status: {run.status}")\n        if run.status in [\'completed\', \'failed\', \'requires_action\']:\n            return run\n\n# Function to handle tool output submission\ndef submit_tool_outputs(thread_id, run_id, tools_to_call):\n    tool_output_array = []\n    for tool in tools_to_call:\n        output = None\n        tool_call_id = tool.id\n        function_name = tool.function.name\n        function_args = tool.function.arguments\n\n        if function_name == "tavily_search":\n            output = tavily_search(query=json.loads(function_args)["query"])\n\n        if output:\n            tool_output_array.append({"tool_call_id": tool_call_id, "output": output})\n\n    return client.beta.threads.runs.submit_tool_outputs(\n        thread_id=thread_id,\n        run_id=run_id,\n        tool_outputs=tool_output_array\n    )\n\n# Function to print messages from a thread\ndef print_messages_from_thread(thread_id):\n    messages = client.beta.threads.messages.list(thread_id=thread_id)\n    for msg in messages:\n        print(f"{msg.role}: {msg.content[0].text.value}")\n\n# Create an assistant\nassistant = client.beta.assistants.create(\n    instructions=assistant_prompt_instruction,\n    model="gpt-4-1106-preview",\n    tools=[{\n        "type": "function",\n        "function": {\n            "name": "tavily_search",\n            "description": "Get information on recent events from the web.",\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "query": {"type": "string", "description": "The search query to use. For example: \'Latest news on Nvidia stock performance\'"},\n                },\n                "required": ["query"]\n            }\n        }\n    }]\n)\nassistant_id = assistant.id\nprint(f"Assistant ID: {assistant_id}")\n\n# Create a thread\nthread = client.beta.threads.create()\nprint(f"Thread: {thread}")\n\n# Ongoing conversation loop\nwhile True:\n    user_input = input("You: ")\n    if user_input.lower() == \'exit\':\n        break\n\n    # Create a message\n    message = client.beta.threads.messages.create(\n        thread_id=thread.id,\n        role="user",\n        content=user_input,\n    )\n\n    # Create a run\n    run = client.beta.threads.runs.create(\n        thread_id=thread.id,\n        assistant_id=assistant_id,\n    )\n    print(f"Run ID: {run.id}")\n\n    # Wait for run to complete\n    run = wait_for_run_completion(thread.id, run.id)\n\n    if run.status == \'failed\':\n        print(run.error)\n        continue\n    elif run.status == \'requires_action\':\n        run = submit_tool_outputs(thread.id, run.id, run.required_action.submit_tool_outputs.tool_calls)\n        run = wait_for_run_completion(thread.id, run.id)\n\n    # Print messages from the thread\n    print_messages_from_thread(thread.id)\n'})}),"\n",(0,a.jsx)(t.p,{children:"The assistant can be further customized and improved using additional retrieval information, OpenAI\u2019s coding interpreter and more. Also, you can go ahead and add more function tools to make the assistant even smarter."}),"\n",(0,a.jsx)(t.p,{children:"Feel free to drop a comment below if you have any further questions!"})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},4031:e=>{e.exports=JSON.parse('{"permalink":"/blog/building-openai-assistant","source":"@site/blog/2023-11-12-openai-assistant/index.md","title":"How to build an OpenAI Assistant with Internet access","description":"OpenAI has done it again with a groundbreaking DevDay showcasing some of the latest improvements to the OpenAI suite of tools, products and services. One major release was the new Assistants API that makes it easier for developers to build their own assistive AI apps that have goals and can call models and tools.","date":"2023-11-12T00:00:00.000Z","tags":[{"inline":true,"label":"tavily","permalink":"/blog/tags/tavily"},{"inline":true,"label":"search-api","permalink":"/blog/tags/search-api"},{"inline":true,"label":"openai","permalink":"/blog/tags/openai"},{"inline":true,"label":"assistant-api","permalink":"/blog/tags/assistant-api"}],"readingTime":5.855,"hasTruncateMarker":false,"authors":[{"name":"Assaf Elovic","title":"Creator @ GPT Researcher and Tavily","url":"https://github.com/assafelovic","imageURL":"https://lh3.googleusercontent.com/a/ACg8ocJtrLku69VG_2Y0sJa5mt66gIGNaEBX5r_mgE6CRPEb7A=s96-c","key":"assafe","page":null}],"frontMatter":{"slug":"building-openai-assistant","title":"How to build an OpenAI Assistant with Internet access","authors":["assafe"],"tags":["tavily","search-api","openai","assistant-api"]},"unlisted":false,"prevItem":{"title":"How to Build the Ultimate Research Multi-Agent Assistant","permalink":"/blog/gptr-langgraph"},"nextItem":{"title":"How we built GPT Researcher","permalink":"/blog/building-gpt-researcher"}}')},8314:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/diagram-assistant-dc2f0898038aeab2cea7be34e9e528ed.jpeg"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},9140:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/diagram-1-6294e919a265f26a37175386003c5074.png"}}]);