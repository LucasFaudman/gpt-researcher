"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2976],{2874:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"gpt-researcher/context/tailored-research","title":"Tailored Research","description":"The GPT Researcher package allows you to tailor the research to your needs such as researching on specific sources (URLs) or local documents, and even specify the agent prompt instruction upon which the research is conducted.","source":"@site/docs/gpt-researcher/context/tailored-research.md","sourceDirName":"gpt-researcher/context","slug":"/gpt-researcher/context/tailored-research","permalink":"/docs/gpt-researcher/context/tailored-research","draft":false,"unlisted":false,"editUrl":"https://github.com/assafelovic/gpt-researcher/tree/master/docs/docs/gpt-researcher/context/tailored-research.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Visualizing Websockets","permalink":"/docs/gpt-researcher/frontend/visualizing-websockets"},"next":{"title":"Local Documents","permalink":"/docs/gpt-researcher/context/local-docs"}}');var s=t(4848),o=t(8453);const c={},a="Tailored Research",i={},h=[{value:"Research on Specific Sources \ud83d\udcda",id:"research-on-specific-sources-",level:3},{value:"Specify Agent Prompt \ud83d\udcdd",id:"specify-agent-prompt-",level:3},{value:"Research on Local Documents \ud83d\udcc4",id:"research-on-local-documents-",level:3},{value:"Hybrid Research \ud83d\udd04",id:"hybrid-research-",level:3},{value:"Research on LangChain Documents \ud83e\udd9c\ufe0f\ud83d\udd17",id:"research-on-langchain-documents-\ufe0f",level:3}];function p(e){const r={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"tailored-research",children:"Tailored Research"})}),"\n",(0,s.jsx)(r.p,{children:"The GPT Researcher package allows you to tailor the research to your needs such as researching on specific sources (URLs) or local documents, and even specify the agent prompt instruction upon which the research is conducted."}),"\n",(0,s.jsx)(r.h3,{id:"research-on-specific-sources-",children:"Research on Specific Sources \ud83d\udcda"}),"\n",(0,s.jsxs)(r.p,{children:["You can specify the sources you want the GPT Researcher to research on by providing a list of URLs. The GPT Researcher will then conduct research on the provided sources via ",(0,s.jsx)(r.code,{children:"source_urls"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["If you want GPT Researcher to perform additional research outside of the URLs you provided, i.e., conduct research on various other websites that it finds suitable for the query/sub-query, you can set the parameter ",(0,s.jsx)(r.code,{children:"complement_source_urls"})," as ",(0,s.jsx)(r.code,{children:"True"}),". Default value of ",(0,s.jsx)(r.code,{children:"False"})," will only scour the websites you provide via ",(0,s.jsx)(r.code,{children:"source_urls"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from gpt_researcher import GPTResearcher\nimport asyncio\n\nasync def get_report(query: str, report_type: str, sources: list) -> str:\n    researcher = GPTResearcher(query=query, report_type=report_type, source_urls=sources, complement_source_urls=False)\n    await researcher.conduct_research()\n    report = await researcher.write_report()\n    return report\n\nif __name__ == "__main__":\n    query = "What are the biggest trends in AI lately?"\n    report_source = "static"\n    sources = [\n        "https://en.wikipedia.org/wiki/Artificial_intelligence",\n        "https://www.ibm.com/think/insights/artificial-intelligence-trends",\n        "https://www.forbes.com/advisor/business/ai-statistics"\n    ]\n    report = asyncio.run(get_report(query=query, report_source=report_source, sources=sources))\n    print(report)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"specify-agent-prompt-",children:"Specify Agent Prompt \ud83d\udcdd"}),"\n",(0,s.jsxs)(r.p,{children:["You can specify the agent prompt instruction upon which the research is conducted. This allows you to guide the research in a specific direction and tailor the report layout.\nSimply pass the prompt as the ",(0,s.jsx)(r.code,{children:"query"})," argument to the ",(0,s.jsx)(r.code,{children:"GPTResearcher"}),' class and the "custom_report" ',(0,s.jsx)(r.code,{children:"report_type"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from gpt_researcher import GPTResearcher\nimport asyncio\n\nasync def get_report(prompt: str, report_type: str) -> str:\n    researcher = GPTResearcher(query=prompt, report_type=report_type)\n    await researcher.conduct_research()\n    report = await researcher.write_report()\n    return report\n    \nif __name__ == "__main__":\n    report_type = "custom_report"\n    prompt = "Research the latest advancements in AI and provide a detailed report in APA format including sources."\n\n    report = asyncio.run(get_report(prompt=prompt, report_type=report_type))\n    print(report)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"research-on-local-documents-",children:"Research on Local Documents \ud83d\udcc4"}),"\n",(0,s.jsx)(r.p,{children:"You can instruct the GPT Researcher to research on local documents by providing the path to those documents. Currently supported file formats are: PDF, plain text, CSV, Excel, Markdown, PowerPoint, and Word documents."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Step 1"}),": Add the env variable ",(0,s.jsx)(r.code,{children:"DOC_PATH"})," pointing to the folder where your documents are located."]}),"\n",(0,s.jsx)(r.p,{children:"For example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'export DOC_PATH="./my-docs"\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Step 2"}),": When you create an instance of the ",(0,s.jsx)(r.code,{children:"GPTResearcher"})," class, pass the ",(0,s.jsx)(r.code,{children:"report_source"})," argument as ",(0,s.jsx)(r.code,{children:'"local"'}),"."]}),"\n",(0,s.jsx)(r.p,{children:"GPT Researcher will then conduct research on the provided documents."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from gpt_researcher import GPTResearcher\nimport asyncio\n\nasync def get_report(query: str, report_source: str) -> str:\n    researcher = GPTResearcher(query=query, report_source=report_source)\n    await researcher.conduct_research()\n    report = await researcher.write_report()\n    return report\n    \nif __name__ == "__main__":\n    query = "What can you tell me about myself based on my documents?"\n    report_source = "local" # "local" or "web"\n\n    report = asyncio.run(get_report(query=query, report_source=report_source))\n    print(report)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"hybrid-research-",children:"Hybrid Research \ud83d\udd04"}),"\n",(0,s.jsxs)(r.p,{children:["You can combine the above methods to conduct hybrid research. For example, you can instruct the GPT Researcher to research on both web sources and local documents.\nSimply provide the sources and set the ",(0,s.jsx)(r.code,{children:"report_source"})," argument as ",(0,s.jsx)(r.code,{children:'"hybrid"'})," and watch the magic happen."]}),"\n",(0,s.jsxs)(r.p,{children:["Please note! You should set the proper retrievers for the web sources and doc path for local documents for this to work.\nTo learn more about retrievers check out the ",(0,s.jsx)(r.a,{href:"https://docs.gptr.dev/docs/gpt-researcher/search-engines/retrievers",children:"Retrievers"})," documentation."]}),"\n",(0,s.jsx)(r.h3,{id:"research-on-langchain-documents-\ufe0f",children:"Research on LangChain Documents \ud83e\udd9c\ufe0f\ud83d\udd17"}),"\n",(0,s.jsx)(r.p,{children:"You can instruct the GPT Researcher to research on a list of langchain document instances."}),"\n",(0,s.jsx)(r.p,{children:"For example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from langchain_core.documents import Document\nfrom typing import List, Dict\nfrom gpt_researcher import GPTResearcher\nfrom langchain_postgres.vectorstores import PGVector\nfrom langchain_openai import OpenAIEmbeddings\nfrom sqlalchemy import create_engine\nimport asyncio\n\n\n\nCONNECTION_STRING = \'postgresql://someuser:somepass@localhost:5432/somedatabase\'\n\ndef get_retriever(collection_name: str, search_kwargs: Dict[str, str]):\n    engine = create_engine(CONNECTION_STRING)\n    embeddings =  OpenAIEmbeddings()\n\n    index = PGVector.from_existing_index(\n        use_jsonb=True,\n        embedding=embeddings,\n        collection_name=collection_name,\n        connection=engine,\n    )\n\n    return index.as_retriever(search_kwargs=search_kwargs)\n\n\nasync def get_report(query: str, report_type: str, report_source: str, documents: List[Document]) -> str:\n    researcher = GPTResearcher(query=query, report_type=report_type, report_source=report_source, documents=documents)\n    await researcher.conduct_research()\n    report = await researcher.write_report()\n    return report\n\nif __name__ == "__main__":\n    query = "What can you tell me about blue cheese based on my documents?"\n    report_type = "research_report"\n    report_source = "langchain_documents"\n\n    # using a LangChain retriever to get all the documents regarding cheese\n    # https://api.python.langchain.com/en/latest/retrievers/langchain_core.retrievers.BaseRetriever.html#langchain_core.retrievers.BaseRetriever.invoke\n    langchain_retriever = get_retriever("cheese_collection", { "k": 3 })\n    documents = langchain_retriever.invoke("All the documents about cheese")\n    report = asyncio.run(get_report(query=query, report_type=report_type, report_source=report_source, documents=documents))\n    print(report)\n'})})]})}function d(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>a});var n=t(6540);const s={},o=n.createContext(s);function c(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);