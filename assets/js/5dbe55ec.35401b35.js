"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[989],{5459:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"gpt-researcher/getting-started/linux-deployment","title":"Running on Linux","description":"This guide will walk you through the process of deploying GPT Researcher on a Linux server.","source":"@site/docs/gpt-researcher/getting-started/linux-deployment.md","sourceDirName":"gpt-researcher/getting-started","slug":"/gpt-researcher/getting-started/linux-deployment","permalink":"/docs/gpt-researcher/getting-started/linux-deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/assafelovic/gpt-researcher/tree/master/docs/docs/gpt-researcher/getting-started/linux-deployment.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Docker: Quickstart","permalink":"/docs/gpt-researcher/getting-started/getting-started-with-docker"},"next":{"title":"PIP Package","permalink":"/docs/gpt-researcher/gptr/pip-package"}}');var r=t(4848),o=t(8453);const a={},i="Running on Linux",l={},p=[{value:"Server Requirements",id:"server-requirements",level:2},{value:"Deployment Steps",id:"deployment-steps",level:2},{value:"Step 1: Update the System",id:"step-1-update-the-system",level:3},{value:"First, ensure your package index is up-to-date:",id:"first-ensure-your-package-index-is-up-to-date",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"running-on-linux",children:"Running on Linux"})}),"\n",(0,r.jsx)(n.p,{children:"This guide will walk you through the process of deploying GPT Researcher on a Linux server."}),"\n",(0,r.jsx)(n.h2,{id:"server-requirements",children:"Server Requirements"}),"\n",(0,r.jsxs)(n.p,{children:["The default Ubuntu droplet option on ",(0,r.jsx)(n.a,{href:"https://m.do.co/c/1a2af257efba",children:"DigitalOcean"})," works well, but this setup should work on any hosting service with similar specifications:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2 GB RAM"}),"\n",(0,r.jsx)(n.li,{children:"1 vCPU"}),"\n",(0,r.jsx)(n.li,{children:"50 GB SSD Storage"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's a screenshot of the recommended Ubuntu machine specifications:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://github.com/user-attachments/assets/035865c0-d1a2-4990-b7fb-544c229d5198",alt:"Ubuntu Server Specifications"})}),"\n",(0,r.jsx)(n.h2,{id:"deployment-steps",children:"Deployment Steps"}),"\n",(0,r.jsx)(n.p,{children:"After setting up your server, follow these steps to install Docker, Docker Compose, and Nginx."}),"\n",(0,r.jsx)(n.p,{children:"Some more commands to achieve that:"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-update-the-system",children:"Step 1: Update the System"}),"\n",(0,r.jsx)(n.h3,{id:"first-ensure-your-package-index-is-up-to-date",children:"First, ensure your package index is up-to-date:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'sudo apt update\n### Step 2: Install Git\n### Git is a version control system. Install it using:\n\nsudo apt install git -y\n\n### Verify the installation by checking the Git version:\ngit --version\n### Step 3: Install Docker\n### Docker is a platform for developing, shipping, and running applications inside containers.\n\n### Install prerequisites:\n\nsudo apt install apt-transport-https ca-certificates curl software-properties-common -y\n### Add Docker\u2019s official GPG key:\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n### Set up the stable repository:\n\necho "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n### Update the package index again and install Docker:\n\nsudo apt update\nsudo apt install docker-ce -y\n### Verify Docker installation:\n\nsudo systemctl status docker\n### Optionally, add your user to the docker group to run Docker without sudo:\n\nsudo usermod -aG docker ${USER}\n### Log out and back in for the group change to take effect.\n\nStep 4: Install Nginx\n### Nginx is a high-performance web server.\n\n### Install Nginx:\n\nsudo apt install nginx -y\n### Start and enable Nginx:\n\nsudo systemctl start nginx\nsudo systemctl enable nginx\n### Verify Nginx installation:\n\nsudo systemctl status nginx\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here's your nginx config file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"events {}\n\nhttp {\n   server {\n       listen 80;\n       server_name name.example;\n       \n       client_max_body_size 64M;\n\n       location / {\n           proxy_pass http://localhost:3000;\n           proxy_http_version 1.1;\n           proxy_set_header Upgrade $http_upgrade;\n           proxy_set_header Connection 'upgrade';\n           proxy_set_header Host $host;\n           proxy_cache_bypass $http_upgrade;\n       }\n\n       location ~ ^/(ws|upload|files|outputs|getConfig|setConfig) {\n           proxy_pass http://localhost:8000;\n           proxy_http_version 1.1;\n           proxy_set_header Upgrade $http_upgrade;\n           proxy_set_header Connection \"Upgrade\";\n           proxy_set_header Host $host;\n       }\n   }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"And if you're using SSL:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nginx",children:"server {\n    server_name name.example;\n    \n    client_max_body_size 64M;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n    \n    location ~ ^/(ws|upload|files|outputs|getConfig|setConfig) {\n        proxy_pass http://localhost:8000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header Host $host;\n    }\n    \n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/name.example/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/name.example/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n}\n\nserver {\n    if ($host = name.example) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n    \n    listen 80;\n    server_name name.example;\n    return 404; # managed by Certbot\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"And the relevant commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"vim /etc/nginx/nginx.conf\n### Edit it to reflect above. Then verify all is good with:\n\nsudo nginx -t\n# If there are no errors:\n\nsudo systemctl restart nginx\n\n# Clone .env.example as .env\n# Run from root: \n\ndocker-compose up --build\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);