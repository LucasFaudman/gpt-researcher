"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5981],{8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(6540);const o={},r=s.createContext(o);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},9955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gpt-researcher/gptr/querying-the-backend","title":"Querying the Backend","description":"Introduction","source":"@site/docs/gpt-researcher/gptr/querying-the-backend.md","sourceDirName":"gpt-researcher/gptr","slug":"/gpt-researcher/gptr/querying-the-backend","permalink":"/docs/gpt-researcher/gptr/querying-the-backend","draft":false,"unlisted":false,"editUrl":"https://github.com/assafelovic/gpt-researcher/tree/master/docs/docs/gpt-researcher/gptr/querying-the-backend.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Scraping Options","permalink":"/docs/gpt-researcher/gptr/scraping"},"next":{"title":"Automated Tests","permalink":"/docs/gpt-researcher/gptr/automated-tests"}}');var o=t(4848),r=t(8453);const c={},a="Querying the Backend",i={},d=[{value:"Introduction",id:"introduction",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"querying-the-backend",children:"Querying the Backend"})}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"In this section, we will discuss how to query the GPTR backend server. The GPTR backend server is a Python server that runs the GPTR Python package. The server listens for WebSocket connections and processes incoming messages to generate reports, streaming back logs and results to the client."}),"\n",(0,o.jsxs)(n.p,{children:["An example WebSocket client is implemented in the ",(0,o.jsx)(n.code,{children:"gptr-webhook.js"})," file below."]}),"\n",(0,o.jsxs)(n.p,{children:["This function sends a Webhook Message to the GPTR Python backend running on localhost:8000, but this example can also be modified to query a ",(0,o.jsx)(n.a,{href:"https://docs.gptr.dev/docs/gpt-researcher/getting-started/linux-deployment",children:"GPTR Server hosted on Linux"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"// gptr-webhook.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"\nconst WebSocket = require('ws');\n\nlet socket = null;\nlet responseCallback = null;\n\nasync function initializeWebSocket() {\n  if (!socket) {\n    const host = 'localhost:8000';\n    const ws_uri = `ws://${host}/ws`;\n\n    socket = new WebSocket(ws_uri);\n\n    socket.onopen = () => {\n      console.log('WebSocket connection established');\n    };\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket data received:', data);\n\n      if (data.content === 'dev_team_result' \n          && data.output.rubber_ducker_thoughts != undefined\n          && data.output.tech_lead_review != undefined) {\n        if (responseCallback) {\n          responseCallback(data.output);\n          responseCallback = null; // Clear callback after use\n        }\n      } else {\n        console.log('Received data:', data);\n      }\n    };\n\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n      socket = null;\n    };\n\n    socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n}\n\nasync function sendWebhookMessage(message) {\n  return new Promise((resolve, reject) => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      initializeWebSocket();\n    }\n\n    const data = {\n      task: message,\n      report_type: 'dev_team',\n      report_source: 'web',\n      tone: 'Objective',\n      headers: {},\n      repo_name: 'elishakay/gpt-researcher'\n    };\n\n    const payload = \"start \" + JSON.stringify(data);\n\n    responseCallback = (response) => {\n      resolve(response); // Resolve the promise with the WebSocket response\n    };\n\n    if (socket.readyState === WebSocket.OPEN) {\n      socket.send(payload);\n      console.log('Message sent:', payload);\n    } else {\n      socket.onopen = () => {\n        socket.send(payload);\n        console.log('Message sent after connection:', payload);\n      };\n    }\n  });\n}\n\nmodule.exports = {\n  sendWebhookMessage\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"And here's how you can leverage this helper function:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const { sendWebhookMessage } = require('./gptr-webhook');\n\nasync function main() {\n  const message = 'How do I get started with GPT-Researcher Websockets?';\n  const response = await sendWebhookMessage(message);\n  console.log('Response:', response);\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);