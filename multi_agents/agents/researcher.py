from gpt_researcher import GPTResearcher
import asyncio
from colorama import Fore, Style
from .utils.views import print_agent_output
import json


class ResearchAgent:
    def __init__(self):
        pass

    async def research(self, query: str, research_report: str = "research_report", parent_query: str = ""):
        # Initialize the researcher
        researcher = GPTResearcher(query=query, report_type=research_report, config_path=None, parent_query=parent_query)
        # Conduct research on the given query
        await researcher.conduct_research()
        # Write the report
        report = await researcher.write_report()

        return report

    async def run_subtopic_research(self, title: str, subtopic: str):
        try:
            report = await self.research(f"{subtopic}", research_report="subtopic_report", parent_query=title)
        except Exception as e:
            print(f"{Fore.RED}Error in researching topic {subtopic}: {e}{Style.RESET_ALL}")
            report = None
        return {subtopic: report}

    async def run_initial_research(self, research_state: dict):
        task = research_state.get("task")
        query = task.get("query")
        print_agent_output(f"Running initial research on the following query: {query}", agent="RESEARCHER")
        return {"task": task, "initial_research": """### Integration with Existing Research Ecosystems


Tavily Search API is designed to enhance the capabilities of large language models (LLMs) and reinforcement learning models (RAG) by providing efficient, accurate, and real-time search results. The API is noted for its ability to reduce biases and hallucinations in AI responses, making it a critical tool for developers aiming to improve decision-making processes in AI applications. Key features include customizable search depths, domain management, and HTML content control, which allow for a tailored search experience ([Tavily](https://tavily.com/?via=addoobot&ref=addoobot)).


### Customization and Integration Options


One of the standout features of Tavily is its ability to seamlessly integrate with existing research tools and databases. This interoperability is crucial for researchers who rely on multiple data sources and analytical tools to conduct their studies. Tavily supports various data formats and can connect with popular research databases and software, enhancing its utility and flexibility in diverse research environments.


### Real-Time Analytical Feedback


Tavily offers extensive customization options, including the ability to specify source focus and manage the depth of search results. This flexibility is complemented by its compatibility with various programming environments, as it can be integrated using a Python library or a simple API call. Additionally, Tavily partners with platforms like Langchain and LlamaIndex to broaden its integration capabilities, making it a versatile choice for developers ([Tavily](https://tavily.com/?via=addoobot&ref=addoobot)).


### Speed and Efficiency


Tavily provides real-time feedback on data analysis, which is a significant advancement in AI-driven research tools. This feature allows researchers to make immediate adjustments to their methodologies based on the insights generated by the tool. Real-time analytics help in optimizing research strategies and improving the accuracy of the outcomes, thereby accelerating the research process and enhancing the quality of the results.


### User-Friendly Interface with No-Code Options


One of the standout features of Tavily is its speed. The API is designed to return search results in seconds, depending on the complexity of the query. This rapid response time is crucial for applications requiring real-time data analysis and decision-making, providing a competitive edge in dynamic environments ([Tavily](https://tavily.com/?via=addoobot&ref=addoobot))."""}

    async def run_depth_research(self, draft_state: dict):
        title = draft_state.get("title")
        topic = draft_state.get("topic")
        print_agent_output(f"Running in depth research on the following report topic: {topic}", agent="RESEARCHER")
        research_draft = await self.run_subtopic_research(title, topic)
        return {"draft": research_draft}
